{"version":3,"file":"ng-web-apis-geolocation.js","sources":["@ng-web-apis/geolocation/tokens/geolocation.ts","@ng-web-apis/geolocation/tokens/geolocation-options.ts","@ng-web-apis/geolocation/tokens/geolocation-support.ts","@ng-web-apis/geolocation/services/geolocation.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {inject, InjectionToken} from '@angular/core';\nimport {NAVIGATOR} from '@ng-web-apis/common';\n\nexport const GEOLOCATION = new InjectionToken<Geolocation>(\n    'An abstraction over window.navigator.geolocation object',\n    {\n        factory: () => inject(NAVIGATOR).geolocation,\n    },\n);\n","import {InjectionToken} from '@angular/core';\n\nexport const POSITION_OPTIONS = new InjectionToken<PositionOptions>(\n    'Token for an additional position options',\n    {factory: () => ({})},\n);\n","import {inject, InjectionToken} from '@angular/core';\nimport {GEOLOCATION} from './geolocation';\n\nexport const GEOLOCATION_SUPPORT = new InjectionToken<boolean>(\n    'Is Geolocation API supported?',\n    {\n        factory: () => {\n            return !!inject(GEOLOCATION);\n        },\n    },\n);\n","import {Inject, Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {finalize, shareReplay} from 'rxjs/operators';\nimport {GEOLOCATION} from '../tokens/geolocation';\nimport {POSITION_OPTIONS} from '../tokens/geolocation-options';\nimport {GEOLOCATION_SUPPORT} from '../tokens/geolocation-support';\n\n// TODO: Replace type with GeolocationPosition after bumping TS to 4.1.3+\n// @dynamic\n@Injectable({\n    providedIn: 'root',\n})\nexport class GeolocationService extends Observable<Parameters<PositionCallback>[0]> {\n    constructor(\n        @Inject(GEOLOCATION) geolocationRef: Geolocation,\n        @Inject(GEOLOCATION_SUPPORT) geolocationSupported: boolean,\n        @Inject(POSITION_OPTIONS)\n        positionOptions: PositionOptions,\n    ) {\n        let watchPositionId = 0;\n\n        super(subscriber => {\n            if (!geolocationSupported) {\n                subscriber.error('Geolocation is not supported in your browser');\n            }\n\n            watchPositionId = geolocationRef.watchPosition(\n                position => subscriber.next(position),\n                positionError => subscriber.error(positionError),\n                positionOptions,\n            );\n        });\n\n        return this.pipe(\n            finalize(() => geolocationRef.clearWatch(watchPositionId)),\n            shareReplay({bufferSize: 1, refCount: true}),\n        ) as GeolocationService;\n    }\n}\n"]}