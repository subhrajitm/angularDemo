/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { finalize, shareReplay } from 'rxjs/operators';
import { GEOLOCATION } from '../tokens/geolocation';
import { POSITION_OPTIONS } from '../tokens/geolocation-options';
import { GEOLOCATION_SUPPORT } from '../tokens/geolocation-support';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/geolocation";
import * as i2 from "../tokens/geolocation-support";
import * as i3 from "../tokens/geolocation-options";
// TODO: Replace type with GeolocationPosition after bumping TS to 4.1.3+
// @dynamic
var GeolocationService = /** @class */ (function (_super) {
    tslib_1.__extends(GeolocationService, _super);
    function GeolocationService(geolocationRef, geolocationSupported, positionOptions) {
        var _this = this;
        /** @type {?} */
        var watchPositionId = 0;
        _this = _super.call(this, function (subscriber) {
            if (!geolocationSupported) {
                subscriber.error('Geolocation is not supported in your browser');
            }
            watchPositionId = geolocationRef.watchPosition(function (position) { return subscriber.next(position); }, function (positionError) { return subscriber.error(positionError); }, positionOptions);
        }) || this;
        return (/** @type {?} */ (_this.pipe(finalize(function () { return geolocationRef.clearWatch(watchPositionId); }), shareReplay({ bufferSize: 1, refCount: true }))));
    }
    GeolocationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    GeolocationService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [GEOLOCATION,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [GEOLOCATION_SUPPORT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [POSITION_OPTIONS,] }] }
    ]; };
    /** @nocollapse */ GeolocationService.ngInjectableDef = i0.defineInjectable({ factory: function GeolocationService_Factory() { return new GeolocationService(i0.inject(i1.GEOLOCATION), i0.inject(i2.GEOLOCATION_SUPPORT), i0.inject(i3.POSITION_OPTIONS)); }, token: GeolocationService, providedIn: "root" });
    return GeolocationService;
}(Observable));
export { GeolocationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy9nZW9sb2NhdGlvbi8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL2dlb2xvY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxRQUFRLEVBQUUsV0FBVyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLCtCQUErQixDQUFDOzs7Ozs7O0FBSWxFO0lBR3dDLDhDQUEyQztJQUMvRSw0QkFDeUIsY0FBMkIsRUFDbkIsb0JBQTZCLEVBRTFELGVBQWdDO1FBSnBDLGlCQXdCQzs7WUFsQk8sZUFBZSxHQUFHLENBQUM7UUFFdkIsUUFBQSxrQkFBTSxVQUFBLFVBQVU7WUFDWixJQUFJLENBQUMsb0JBQW9CLEVBQUU7Z0JBQ3ZCLFVBQVUsQ0FBQyxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQzthQUNwRTtZQUVELGVBQWUsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUMxQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQXpCLENBQXlCLEVBQ3JDLFVBQUEsYUFBYSxJQUFJLE9BQUEsVUFBVSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBL0IsQ0FBK0IsRUFDaEQsZUFBZSxDQUNsQixDQUFDO1FBQ04sQ0FBQyxDQUFDLFNBQUM7UUFFSCxPQUFPLG1CQUFBLEtBQUksQ0FBQyxJQUFJLENBQ1osUUFBUSxDQUFDLGNBQU0sT0FBQSxjQUFjLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUExQyxDQUEwQyxDQUFDLEVBQzFELFdBQVcsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQy9DLEVBQXNCLENBQUM7SUFDNUIsQ0FBQzs7Z0JBNUJKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0RBR1EsTUFBTSxTQUFDLFdBQVc7OENBQ2xCLE1BQU0sU0FBQyxtQkFBbUI7Z0RBQzFCLE1BQU0sU0FBQyxnQkFBZ0I7Ozs2QkFoQmhDO0NBc0NDLEFBN0JELENBR3dDLFVBQVUsR0EwQmpEO1NBMUJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbmFsaXplLCBzaGFyZVJlcGxheX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtHRU9MT0NBVElPTn0gZnJvbSAnLi4vdG9rZW5zL2dlb2xvY2F0aW9uJztcbmltcG9ydCB7UE9TSVRJT05fT1BUSU9OU30gZnJvbSAnLi4vdG9rZW5zL2dlb2xvY2F0aW9uLW9wdGlvbnMnO1xuaW1wb3J0IHtHRU9MT0NBVElPTl9TVVBQT1JUfSBmcm9tICcuLi90b2tlbnMvZ2VvbG9jYXRpb24tc3VwcG9ydCc7XG5cbi8vIFRPRE86IFJlcGxhY2UgdHlwZSB3aXRoIEdlb2xvY2F0aW9uUG9zaXRpb24gYWZ0ZXIgYnVtcGluZyBUUyB0byA0LjEuMytcbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBHZW9sb2NhdGlvblNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPFBhcmFtZXRlcnM8UG9zaXRpb25DYWxsYmFjaz5bMF0+IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChHRU9MT0NBVElPTikgZ2VvbG9jYXRpb25SZWY6IEdlb2xvY2F0aW9uLFxuICAgICAgICBASW5qZWN0KEdFT0xPQ0FUSU9OX1NVUFBPUlQpIGdlb2xvY2F0aW9uU3VwcG9ydGVkOiBib29sZWFuLFxuICAgICAgICBASW5qZWN0KFBPU0lUSU9OX09QVElPTlMpXG4gICAgICAgIHBvc2l0aW9uT3B0aW9uczogUG9zaXRpb25PcHRpb25zLFxuICAgICkge1xuICAgICAgICBsZXQgd2F0Y2hQb3NpdGlvbklkID0gMDtcblxuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHtcbiAgICAgICAgICAgIGlmICghZ2VvbG9jYXRpb25TdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKCdHZW9sb2NhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgYnJvd3NlcicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3YXRjaFBvc2l0aW9uSWQgPSBnZW9sb2NhdGlvblJlZi53YXRjaFBvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0+IHN1YnNjcmliZXIubmV4dChwb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgcG9zaXRpb25FcnJvciA9PiBzdWJzY3JpYmVyLmVycm9yKHBvc2l0aW9uRXJyb3IpLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uT3B0aW9ucyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnBpcGUoXG4gICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiBnZW9sb2NhdGlvblJlZi5jbGVhcldhdGNoKHdhdGNoUG9zaXRpb25JZCkpLFxuICAgICAgICAgICAgc2hhcmVSZXBsYXkoe2J1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlfSksXG4gICAgICAgICkgYXMgR2VvbG9jYXRpb25TZXJ2aWNlO1xuICAgIH1cbn1cbiJdfQ==